In each iteration of this algorithm, an item finds it's correct position in the array.
Best: O(n)
Worst: O(n²)
Average: O(n²)
C#
using System;

class Algorithm
{
    static int[] InsertionSort(int[] array)
    {
        int n = array.Count;
        int current = array[i];
        for(int i = 1; i < n - 1; i++)
        {
            while (i > 0 &&
                   array[i - 1] > array[i])
            {
                array[i] = array[i - 1];
                i--;
            }
            array[i] = current;
        }
        return array;
    }
}

Java
class Algorithm
{
    static int[] InsertionSort(int[] array)
    {
        int n = array.length;
        int current = array[i];
        for(int i = 1; i < n - 1; i++) {
            while (i > 0 &&
                   array[i - 1] > array[i]) {
                array[i] = array[i - 1];
                i--;
            }
            array[i] = current;
        }
        return array;
    }
}

Python
def InsertionSort(array)

    for i in range(1, len(array)):
        current = array[i]
        while (i > 0 and array[i - 1] > array[i]):
            array[i] = array[i - 1];
            i -= 1
        array[i] = current
    return array