Heap Sort uses a heap (data structure) and recersion to make comparisons betweem elements.
Best: O(n log(n))
Worst: O(n)
Average: O(n log(n))
C#
using System;
using System.Linq;
using System.Collections.Generic;

class Sort
{
    public IEnumerable<int> HeapSort(int[] array)
    {
        int n = array.Length;
        for (int i = n / 2 - 1; i >= 0; i--)
        {
            Heapify(array, n, i);
        }
        for (int i = n - 1; i > 0; i--)
        {
            int temp = array[0];
            array[0] = array[i];
            array[i] = temp;

            Heapify(array, i, 0);
        }
        return array;
    }

    private void Heapify(int[] array, int n, int i)
    {
        int largest = i;
        int left = 2 * i + 1; 
        int right = 2 * i + 2; 
        if (left < n &&
            array[left] > array[largest])
        {
            largest = left;
        }           
        if (right < n &&
            array[right] > array[largest])
        {
            largest = right;
        }
        if (largest != i)
        {
            int temp = array[i];
            array[i] = array[largest];
            array[largest] = temp;

            Heapify(array, n, largest);
        }
    }
}

Java
class Sort
{
    public int[] HeapSort(int[] array)
    {
         int n = array.Length;
         for (int i = n / 2 - 1; i >= 0; i--){
              Heapify(array, n, i);
         }
         for (int i = n - 1; i > 0; i--){
             int temp = array[0];
             array[0] = array[i];
             array[i] = temp;
             Heapify(array, i, 0);
         }
         return array;
    }

    private void Heapify(int[] array, int n, int i)
    {
         int largest = i;
         int left = 2 * i + 1; 
         int right = 2 * i + 2; 
         if (left < n &&
             array[left] > array[largest]){
             largest = left;
         }
         if (right < n &&
             array[right] > array[largest]){
             largest = right;
         }
         if (largest != i){
             int temp = array[i];
             array[i] = array[largest];
             array[largest] = temp;
             Heapify(array, n, largest);
         }
    }
}

Python
def HeapSort(array)
     n = len(array)
     i = n/2 - 1
     while i >= 0
          Heapify(array, n, i)
          i -= 1
     i = n - 1 
     while i > 0
          temp = array[0]
          array[0] = array[i]
          array[i] = temp
          Heapify(array, i, 0)
          i -= 1
     return array

def Heapify(array, n, i)
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2
    if left < n and array[left] > array[largest]
        largest = left
    if right < n and array[right] > array[largest]
        largest = right
    if largest != i
        temp = array[i]
        array[i] = array[largest]
        array[largest] = temp
        Heapify(array, n, largest)
