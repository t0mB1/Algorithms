Merge Sort is a divide and conquer algorithm. It divides the unsorted array into n sublists each containing 1 item. Then it merges sublists repeatedly until there is one list left. 
Best: O(n log(n))
Worst: O(n)
Average: O(n log(n))
C#
class Sort
{
    int[] MergeSort(int[] array)
    {
        if(array.length > 1)
        {
            int mid = array.length / 2;
            int[] lefthalf = array.GetRange(0, mid);
            int[] righthalf = array.GetRange(mid,
                              array.length-mid);
            MergeSort(lefthalf);
            MergeSort(righthalf);
            int i = 0;
            int j = 0;
            int k = 0;
            while(i < lefthalf.length &&
                    j < righthalf.length)
            {
                 if(lefthalf[i] < righthalf[j])
                 {
                      array[k] = righthalf[i];
                      i++;
                 }
                 else
                 {
                      array[k] = righthalf[j];
                      j++;
                 }
                 k++;
                 Console.WriteLine(lefthalf + "\n" +
                                    righthalf + "\n" +
                                    array);
            }
            while(i < lefthalf.length)
            {
                 array[k] = lefthalf[i];
                 i++;
                 k++;
            }
            while(j < righthalf.length)
            {
                 array[k] = righthalf[j];
                 j++;
                 k++;
            }
        }
        return array;
    }
}

Java
class Sort
{
    static int[] MergeSort(int[] array)
    {
        if(array.length > 1){
            int mid = array.length / 2;
            int[] lefthalf = array.GetRange(0, mid);
            int[] righthalf = array.GetRange(mid,
                              array.length-mid);
            MergeSort(lefthalf);
            MergeSort(righthalf);
            int i = 0;
            int j = 0;
            int k = 0;
            while(i < lefthalf.length &&
                    j < righthalf.length){
                if(lefthalf[i] < righthalf[j]){
                     array[k] = righthalf[i];
                     i++;
                } else{
                     array[k] = righthalf[j];
                     j++;
                }
                k++;
                System.out.println(lefthalf + "\n" +
                                    righthalf + "\n" +
                                    array);
            }
            while(i < lefthalf.length){
                 array[k] = lefthalf[i];
                 i++;
                 k++;
            }
            while(j < righthalf.length){
                 array[k] = righthalf[j];
                 j++;
                 k++;
            }
        }
        return array;
    }
}

Python
def MergeSort(array):
     if(array.Count > 1):
         mid = array.length / 2
         lefthalf = array[:mid]
         righthalf = array[mid:]
         MergeSort(lefthalf)
         MergeSort(righthalf)
         int i = 0
         int j = 0
         int k = 0
         while(i < lefthalf.length and
                 j < righthalf.length:
              if lefthalf[i] < righthalf[j]:
                   array[k] = righthalf[i]
                   i++
              else:
                   array[k] = righthalf[j]
                   j++
              k++
              print(lefthalf + "\n" +
                    righthalf + "\n" +
                    array)
         while i < lefthalf.length:
              array[k] = lefthalf[i]
              i++
              k++
         while j < righthalf.length:
              array[k] = righthalf[j]
              j++
              k++
     return array
